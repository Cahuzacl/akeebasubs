<?xml version="1.0"?>
<project name="AkeebaSubscriptions" description="Akeeba Subscriptions" default="git" >
	<property file="./build.properties" />

    <!-- Default properties, set only if not already assigned in the build.properties file -->
	<property name="dirs.root" value="../" />
	<property name="dirs.component" value="../component" />
	<property name="dirs.modules" value="../modules" />
	<property name="dirs.plugins" value="../plugins" />
	<property name="dirs.documentation" value="../documentation" />

	<property name="dirs.release" value="../release" />

	<property name="dirs.bin" value="bin" />
	<property name="dirs.bin.libxml" value="${dirs.bin}/libxml" />
	<property name="dirs.bin.fop" value="${dirs.bin}/fop" />
	<property name="dirs.bin.dbxsl" value="${dirs.bin}/dbxsl" />

	<property name="version" value="git" />

	<taskdef name="zipme" classname="phingext.ZipmeTask" />
	<taskdef name="gitversion" classname="phingext.GitVersionTask" />

	<!--
	====================================================================================================
	File sets
	====================================================================================================
	-->

	<fileset dir="${dirs.component}" id="component">
		<include name="backend/**" />
		<include name="frontend/**" />
		<include name="language/**" />
		<include name="media/**" />

		<include name="*" />

		<exclude name="LICENSE.txt" />
		<exclude name="script.akeebasubs.php" />
		<exclude name="backend/invoices/*.pdf" />
		<exclude name="backend/assets/tcpdf/certificates/*.cer" />
	</fileset>

    <fileset dir="${dirs.component}/cli" id="cli">
        <include name="*.php" />
        <include name="file_akeebasubs.xml" />
    </fileset>

	<!--
	====================================================================================================
	Tasks - General
	====================================================================================================
	-->
	
	<target name="all" description="Makes everything"
		depends="git,documentation">
	</target>

	<target name="git" description="Makes only packages, not the documentation"
		depends="new-release,setup-properties,component-packages">
	</target>

	<target name="new-release" description="Create the release directory afresh">
		<!-- Recreate the release directory -->
		<delete dir="${dirs.release}" quiet="yes" includeemptydirs="false" />
		<mkdir dir="${dirs.release}" />
	</target>
	
	<target name="setup-properties" description="Set up version and build properties">
		<!-- Initialize the build.date timestamp -->
		<tstamp>
			<format property="build.date" pattern="%Y-%m-%d" />
		</tstamp>

		<!-- Initialize the version if it's not set -->
		<if>
			<equals arg1="${version}" arg2="git" />
			<then>
				<gitversion workingcopy="${dirs.root}" propertyname="git.lastrevision" />
				<property name="version" value="rev${git.lastrevision}" override="true" />
			</then>
		</if>
	</target>

	<!--
	====================================================================================================
	Tasks - Joomla! packages
	====================================================================================================
	-->
	
	<target name="component-packages" depends="package-pkg" />

    <target name="package-com" description="Akeeba Subscriptions Professional"
            depends="new-release,setup-properties">

        <copy file="./templates/akeebasubs.xml" tofile="${dirs.component}/akeebasubs.xml" overwrite="true">
            <filterchain>
                <replacetokens begintoken="##" endtoken="##">
                    <token key="DATE" value="${build.date}" />
                    <token key="VERSION" value="${version}" />
                    <token key="PRO" value="1" />
                </replacetokens>
            </filterchain>
        </copy>
        <copy file="./templates/version.php" tofile="${dirs.component}/backend/version.php" overwrite="true">
            <filterchain>
                <replacetokens begintoken="##" endtoken="##">
                    <token key="DATE" value="${build.date}" />
                    <token key="VERSION" value="${version}" />
                </replacetokens>
            </filterchain>
        </copy>

        <zipme basedir="${dirs.component}" destfile="${dirs.release}/com_akeebasubs.zip" includeemptydirs="true">
            <fileset refid="component" />
        </zipme>
    </target>

    <target name="package-files" description="file_akeebasubs for CLI files" depends="new-release,setup-properties">
        <copy file="./templates/file_akeebasubs.xml" tofile="${dirs.component}/cli/file_akeebasubs.xml" overwrite="true">
            <filterchain>
                <replacetokens begintoken="##" endtoken="##">
                    <token key="DATE" value="${build.date}" />
                    <token key="VERSION" value="${version}" />
                </replacetokens>
            </filterchain>
        </copy>

        <zipme basedir="${dirs.component}/cli" destfile="${dirs.release}/file_akeebasubs.zip" includeemptydirs="true">
            <fileset refid="cli" />
        </zipme>
    </target>

    <target name="package-modules" description="Build all modules" depends="new-release,setup-properties">
        <foreach param="dirname" absparam="absname" target="package-module-folder">
            <fileset dir="${dirs.modules}">
                <type type="dir" />
                <depth max="0" min="0" />
            </fileset>
        </foreach>
    </target>

    <target name="package-module-folder" description="Iterate over the modules in an area (site, admin) directory">
        <property name="module_area" value="${dirname}" />

        <foreach param="module_name" absparam="module_dir" target="package-module-item">
            <fileset dir="${absname}">
                <type type="dir" />
                <depth max="0" min="0" />
            </fileset>
        </foreach>
    </target>

    <target name="package-module-item" description="Package a single module">
        <echo message="Packaging module ${module_area}/${module_name}" />

        <property name="module_package" value="${dirs.release}/mod_${module_name}.zip" />

        <zipme basedir="${module_dir}" destfile="${module_package}" includeemptydirs="true">
            <fileset dir="${module_dir}">
                <include name="**" />
            </fileset>
        </zipme>
    </target>

    <target name="package-plugins" description="Build all plugins" depends="new-release,setup-properties">
        <foreach param="dirname" absparam="absname" target="package-plugin-folder">
            <fileset dir="${dirs.plugins}">
                <type type="dir" />
                <depth max="0" min="0" />
            </fileset>
        </foreach>
    </target>

    <target name="package-plugin-folder" description="Iterate over the plugins in an area (system, user, ...) directory">
        <property name="plugin_area" value="${dirname}" />

        <foreach param="plugin_name" absparam="plugin_dir" target="package-plugin-item">
            <fileset dir="${absname}">
                <type type="dir" />
                <depth max="0" min="0" />
            </fileset>
        </foreach>
    </target>

    <target name="package-plugin-item" description="Package a single plugin">
        <echo message="Packaging plugin ${plugin_area}/${plugin_name}" />

        <property name="plugin_package" value="${dirs.release}/plg_${plugin_area}_${plugin_name}.zip" />

        <zipme basedir="${plugin_dir}" destfile="${plugin_package}" includeemptydirs="true">
            <fileset dir="${plugin_dir}">
                <include name="**" />
            </fileset>
        </zipme>
    </target>

    <target name="package-fof" description="Copy the FOF 3 installation package to the release directory">
        <!-- Start by building a dev build of FOF... -->
        <phing phingfile="build.xml" dir="${dirs.root}/../fof3/build" inheritAll="false" target="git">
            <property name="dirs.root" value="${dirs.root}/../fof3" />
        </phing>

        <!-- ...and copy it to the release directory -->
        <copy todir="${dirs.release}" overwrite="true">
            <mapper type="regexp" from="^(lib_fof30)(-.*)\.zip$" to="\1.zip" />
            <fileset dir="${dirs.root}/../fof3/release">
                <include name="lib_fof30-*.zip" />
            </fileset>
        </copy>

        <if>
            <or>
                <contains string="${version}" substring="rev" />
                <contains string="${version}" substring="dev" />
                <contains string="${version}" substring="git" />
                <contains string="${version}" substring="svn" />
            </or>
            <else>
                <!-- Get the FOF update XML file -->
                <httpget url="http://cdn.akeebabackup.com/updates/fof3.xml" dir="${dirs.release}" filename="fof.tmp" followRedirects="true" />

                <!-- Extract the latest FOF version and download location -->
                <xslt todir="${dirs.release}" style="${phing.dir}/tools/foflatest.xslt">
                    <mapper type="glob" from="*.tmp" to="*.xml" />
                    <fileset dir="${dirs.release}">
                        <include name="fof.tmp" />
                    </fileset>
                </xslt>
                <delete file="${dirs.release}/fof.tmp" />
                <xmlproperty file="${dirs.release}/fof.xml" />
                <echo message="Latest FOF version ${latestFof.version} - ${latestFof.download}" />

                <!-- Make sure there is a cache directory, or create it -->
                <if>
                    <available file="${dirs.root}/../buildfiles/cache" />
                    <else>
                        <mkdir dir="${dirs.root}/../buildfiles/cache" />
                    </else>
                </if>

                <!-- Get the FOF version from the cache -->
                <property name="cache_file_exists" value="0" />
                <available file="${dirs.root}/../buildfiles/cache/fof.xml" property="cache_file_exists" value="1" />

                <if>
                    <equals arg1="${cache_file_exists}" arg2="1" />
                    <then>
                        <xmlproperty file="${dirs.root}/../buildfiles/cache/fof.xml" keepRoot="false" prefix="fofcache." />
                    </then>
                    <else>
                        <property name="fofcache.version" value="0.0.0" />
                        <property name="fofcache.download" value="" />
                    </else>
                </if>

                <echo message="${latestFof.version} - ${fofcache.version}" />

                <!-- If there is a newer version of FOF available, download it to the cache and update the cached versions -->
                <php expression="version_compare('${latestFof.version}','${fofcache.version}','gt') ? 1 : 0" returnProperty="has_newer_fof" />
                <if>
                    <equals arg1="${has_newer_fof}" arg2="1" />
                    <then>
                        <httpget url="${latestFof.download}" dir="${dirs.root}/../buildfiles/cache" filename="lib_fof30.zip" followRedirects="true" />
                        <copy file="${dirs.release}/fof.xml" todir="${dirs.root}/../buildfiles/cache" />
                    </then>
                </if>

                <!-- Copy the cached FOF release -->
                <copy file="${dirs.root}/../buildfiles/cache/lib_fof30.zip" todir="${dirs.release}" />

                <!-- Clean up -->
                <delete file="${dirs.release}/fof.xml" />
            </else>
        </if>
    </target>

    <target name="package-strapper" description="Copy the Akeeba Strapper 3 installation package to the release directory">
        <!-- Start by building a dev build of Strapper... -->
        <phing phingfile="build.xml" dir="${dirs.root}/../strapper/build" inheritAll="false" target="git">
            <property name="dirs.root" value="${dirs.root}/../strapper" />
        </phing>

        <!-- ...and copy it to the release directory -->
        <copy todir="${dirs.release}" overwrite="true">
            <mapper type="regexp" from="^(file_strapper30)(-.*)\.zip$" to="\1.zip" />
            <fileset dir="${dirs.root}/../strapper/release">
                <include name="file_strapper30-*.zip" />
            </fileset>
        </copy>

        <if>
            <or>
                <contains string="${version}" substring="rev" />
                <contains string="${version}" substring="dev" />
                <contains string="${version}" substring="git" />
                <contains string="${version}" substring="svn" />
            </or>
            <else>
                <!-- Get the Strapper update XML file -->
                <httpget url="http://cdn.akeebabackup.com/updates/strapper.xml" dir="${dirs.release}" filename="strapper.tmp" followRedirects="true" />

                <!-- Extract the latest Strapper version and download location -->
                <xslt todir="${dirs.release}" style="${phing.dir}/tools/strapperlatest.xslt">
                    <mapper type="glob" from="*.tmp" to="*.xml" />
                    <fileset dir="${dirs.release}">
                        <include name="strapper.tmp" />
                    </fileset>
                </xslt>
                <delete file="${dirs.release}/strapper.tmp" />
                <xmlproperty file="${dirs.release}/strapper.xml" />
                <echo message="Latest Akeeba Strapper version ${latestStrapper.version} - ${latestStrapper.download}" />

                <!-- Make sure there is a cache directory, or create it -->
                <if>
                    <available file="${dirs.root}/../buildfiles/cache" />
                    <else>
                        <mkdir dir="${dirs.root}/../buildfiles/cache" />
                    </else>
                </if>

                <!-- Get the Strapper version from the cache -->
                <property name="cache_file_exists" value="0" />
                <available file="${dirs.root}/../buildfiles/cache/strapper.xml" property="cache_file_exists" value="1" />

                <if>
                    <equals arg1="${cache_file_exists}" arg2="1" />
                    <then>
                        <xmlproperty file="${dirs.root}/../buildfiles/cache/strapper.xml" keepRoot="false" prefix="strappercache." />
                    </then>
                    <else>
                        <property name="strappercache.version" value="0.0.0" />
                        <property name="strappercache.download" value="" />
                    </else>
                </if>

                <echo message="${latestStrapper.version} - ${strappercache.version}" />

                <!-- If there is a newer version of Strapper available, download it to the cache and update the cached versions -->
                <php expression="version_compare('${latestStrapper.version}','${strappercache.version}','gt') ? 1 : 0" returnProperty="has_newer_strapper" />
                <if>
                    <equals arg1="${has_newer_strapper}" arg2="1" />
                    <then>
                        <httpget url="${latestStrapper.download}" dir="${dirs.root}/../buildfiles/cache" filename="file_strapper30.zip" followRedirects="true" />
                        <copy file="${dirs.release}/strapper.xml" todir="${dirs.root}/../buildfiles/cache" />
                    </then>
                </if>

                <!-- Copy the cached Strapper release -->
                <copy file="${dirs.root}/../buildfiles/cache/file_strapper30.zip" todir="${dirs.release}" />

                <!-- Clean up -->
                <delete file="${dirs.release}/strapper.xml" />
            </else>
        </if>
    </target>

    <target name="package-pkg" description="Akeeba Subscriptions installation package" depends="new-release, setup-properties, package-com, package-files, package-modules, package-plugins, package-fof">
        <!-- Create the XML manifest -->
        <copy file="./templates/pkg_akeebasubs.xml" tofile="${dirs.release}/pkg_akeebasubs.xml" overwrite="true">
            <filterchain>
                <replacetokens begintoken="##" endtoken="##">
                    <token key="DATE" value="${build.date}" />
                    <token key="VERSION" value="${version}" />
                </replacetokens>
            </filterchain>
        </copy>

        <copy file="${dirs.component}/LICENSE.txt" tofile="${dirs.release}/LICENSE.txt" overwrite="true" />
        <copy file="${dirs.component}/script.akeebasubs.php" tofile="${dirs.release}/script.akeebasubs.php" overwrite="true" />

        <!-- Create the ZIP file -->
        <property name="package_zip" value="${dirs.release}/pkg_akeebasubs-${version}.zip" />

        <zipme basedir="${dirs.release}" destfile="${package_zip}" includeemptydirs="true">
            <fileset dir="${dirs.release}" id="pkg_fileset">
                <include name="com_*.zip" />
                <include name="file_*.zip" />
                <include name="mod_*.zip" />
                <include name="plg_*.zip" />
                <include name="lib_*.zip" />
                <include name="pkg_*.xml" />
                <include name="*.txt" />
                <include name="script.*.php" />
            </fileset>
        </zipme>

        <!-- Clean up -->
        <delete>
            <fileset refid="pkg_fileset" />
        </delete>
    </target>

	<!--
	====================================================================================================
	Tasks - Documentation
	====================================================================================================
	-->
	
	<target name="documentation" description="The documentation"
		depends="doc-j-pdf">
	</target>
	
	<target name="doc-j-pdf" description="Documentation for Joomla! in PDF format">
		<exec command="xsltproc --nonet --xinclude --novalid --stringparam body.start.indent 0 --stringparam variablelist.term.break.after 1 --stringparam variablelist.term.separator &quot;&quot; --stringparam variablelist.max.termlength 12 --stringparam section.autolabel 1 --stringparam toc.section.depth 5 --stringparam fop1.extensions 1  --output ${dirs.release}/akeebasubs-guide.fo ${dirs.bin.dbxsl}/fo/docbook.xsl ${dirs.documentation}/akeebasubs-guide.xml" dir="${project.basedir}" />
		<exec command="${dirs.bin.fop}/fop -fo ${dirs.release}/akeebasubs-guide.fo -pdf ${dirs.release}/akeebasubs-guide.pdf" logoutput="true" />
		<delete file="${dirs.release}/akeebasubs-guide.fo" quiet="yes" />
	</target>	
	<!--
	====================================================================================================
	Tasks - Project management
	====================================================================================================
	-->
    <target name="lang" description="Generate and upload language files">
        <exec command="php ./buildlang.php ${application.startdir}/build.properties ${application.startdir}/.. ${version}" dir="buildlang" passthru="true" />
    </target>

    <target name="link" description="Internal linker">
        <exec command="php ../buildfiles/tools/link.php ${application.startdir}/.." dir="${application.startdir}/.." passthru="true" />
        <exec command="php ../buildfiles/tools/langlink.php ${application.startdir}/.." dir="${application.startdir}/.." passthru="true" />
    </target>

    <target name="relink" description="Project relinker">
        <exec command="php ../buildfiles/tools/relink.php ${site} ${application.startdir}/.." dir="${application.startdir}/.." passthru="true" />
        <exec command="php ../buildfiles/tools/relinklang.php ${site} ${application.startdir}/.." dir="${application.startdir}/.." passthru="true" />
    </target>
	
	<target name="release" depends="setup-properties" description="Upload the release to AkeebaBackup.com">
		<copy file="./templates/release.json" tofile="${dirs.root}/release.json" overwrite="true">
			<filterchain id="standard-tokens">
				<replacetokens begintoken="##" endtoken="##">
					<token key="DATE" value="${build.date}" />
					<token key="VERSION" value="${version}" />
					<token key="RELEASEDIR" value="${phing.dir}/${dirs.release}" />
					<token key="REPODIR" value="${phing.dir}/${dirs.root}" />
				</replacetokens>
			</filterchain>
		</copy>

		<exec command="php ${project.basedir}/../../releasemaker/releasemaker/index.php ${project.basedir}/../release.json" dir="${project.basedir}" passthru="true" />

		<delete file="${dirs.root}/release.json" quiet="yes" />
	</target>

	<target name="ftpdeploy" depends="git">
		<gitversion workingcopy="${dirs.root}" propertyname="git.lastrevision" />
		<echo>Uploading dev release</echo>
		<ftpdeploy
			host="${ftp.host}"
			port="${ftp.port}"
			username="${ftp.username}"
			password="${ftp.password}"
			dir="${ftp.dir}/dev/akeebasubs/${git.lastrevision}"
			mode="${ftp.mode}"
			passive="true"
			level="debug">
			<fileset dir="${dirs.release}">
				<include name="pkg_akeebasubs-*.zip"/>
			</fileset>			
			<fileset dir="${dirs.root}">
				<include name="CHANGELOG"/>
			</fileset>			
		</ftpdeploy>
		<echo>All done. Have a cup of coffee and relax :)</echo>
	</target>

	<target name="docsdeploy">
		<!-- English manual -->
		<echo>Uploading Akeeba Subscriptions documentation</echo>
		<ftpdeploy
			host="${ftp.host}"
			port="${ftp.port}"
			username="${ftp.username}"
			password="${ftp.password}"
			dir="${ftp.dir.docs}/akeeba-subscriptions"
			level="debug">
			<fileset dir="${dirs.documentation}">
				<include name="*.xml"/>
			</fileset>
		</ftpdeploy>
	</target>
	
	<target name="deployall" depends="ftpdeploy,lang,docsdeploy">
	</target>
</project>
